generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id           Int            @id @default(autoincrement()) @map("s_no")
  name         String         @db.VarChar(100)
  email        String         @unique(map: "email") @db.VarChar(100)
  password     String         @db.VarChar(255)
  phone        String?        @db.VarChar(15)
  status       users_status?  @default(active)
  createdAt    DateTime?      @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt    DateTime?      @default(now()) @map("updated_at") @db.Timestamp(0)
  roleId       Int            @map("role_id")
  pgLocationId Int            @map("pg_location_id")
  isDeleted    Boolean?       @default(false) @map("is_deleted")
  pgLocations  pg_locations[]
  roles        roles          @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users_role")

  @@index([roleId], map: "fk_users_role")
}

model beds {
  id              Int                @id @default(autoincrement()) @map("s_no")
  bedNo           String             @map("bed_no") @db.VarChar(50)
  roomId          Int?               @map("room_id")
  pgId            Int?               @map("pg_id")
  images          Json?
  createdAt       DateTime?          @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt       DateTime?          @default(now()) @map("updated_at") @db.Timestamp(0)
  isDeleted       Boolean?           @default(false) @map("is_deleted")
  advancePayments advance_payments[]
  rooms           rooms?             @relation(fields: [roomId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "beds_ibfk_1")
  pgLocations     pg_locations?      @relation(fields: [pgId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_pg_id")
  refundPayments  refund_payments[]
  tenantPayments  tenant_payments[]
  tenants         tenants[]
  visitors        visitors[]

  @@unique([roomId, bedNo], map: "unique_bed_per_room")
  @@index([pgId], map: "fk_pg_id")
}

model employees {
  id           Int             @id @default(autoincrement()) @map("s_no")
  pgLocationId Int?            @map("pg_location_id")
  name         String?         @db.VarChar(100)
  role         String?         @db.VarChar(50)
  phone        String?         @db.VarChar(15)
  email        String?         @unique(map: "email") @db.VarChar(100)
  salary       Decimal?        @db.Decimal(10, 2)
  joinDate     DateTime?       @map("join_date") @db.Date
  status       EmployeeStatus? @default(ACTIVE)
  createdAt    DateTime?       @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt    DateTime?       @default(now()) @map("updated_at") @db.Timestamp(0)
  isDeleted    Boolean?        @default(false) @map("is_deleted")
  pgLocations  pg_locations?   @relation(fields: [pgLocationId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "employees_ibfk_1")

  @@index([pgLocationId], map: "pg_location_id")
}

model pg_locations {
  id              Int                  @id @unique(map: "s_no_2") @default(autoincrement()) @map("s_no")
  userId          Int                  @map("user_id")
  locationName    String               @map("location_name") @db.VarChar(100)
  address         String               @db.VarChar(255)
  pincode         String?              @db.VarChar(10)
  createdAt       DateTime?            @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt       DateTime?            @default(now()) @map("updated_at") @db.Timestamp(0)
  status          pg_locations_status? @default(ACTIVE)
  images          Json?
  cityId          Int?                 @map("city_id")
  stateId         Int?                 @map("state_id")
  advancePayments advance_payments[]
  beds            beds[]
  employees       employees[]
  expenses        expenses[]
  income          income[]
  other_expenses  OtherExpenses[]
  city            city?                @relation(fields: [cityId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_city")
  state           state?               @relation(fields: [stateId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_state")
  users           users                @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "pg_locations_ibfk_1")
  refundPayments  refund_payments[]
  rooms           rooms[]
  tenantPayments  tenant_payments[]
  tenants         tenants[]
  visitors        visitors[]

  @@index([userId], map: "owner_id")
  @@index([id], map: "s_no")
  @@index([cityId], map: "fk_city")
  @@index([stateId], map: "fk_state")
}

model expenses {
  id            Int           @id @default(autoincrement()) @map("s_no")
  pgLocationId  Int?          @map("pg_location_id")
  expenseType   String?       @map("expense_type") @db.VarChar(100)
  amount        Decimal?      @db.Decimal(10, 2)
  paidTo        String?       @map("paid_to") @db.VarChar(100)
  paidDate      DateTime?     @map("paid_date") @db.Date
  paymentMethod String?       @map("payment_method") @db.VarChar(50)
  remarks       String?       @db.VarChar(255)
  createdAt     DateTime?     @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt     DateTime?     @default(now()) @map("updated_at") @db.Timestamp(0)
  isDeleted     Boolean?      @default(false) @map("is_deleted")
  pgLocations   pg_locations? @relation(fields: [pgLocationId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "expenses_ibfk_1")

  @@index([pgLocationId], map: "pg_location_id")
}

model income {
  id            Int           @id @default(autoincrement()) @map("s_no")
  pgLocationId  Int?          @map("pg_location_id")
  incomeType    String?       @map("income_type") @db.VarChar(100)
  amount        Decimal?      @db.Decimal(10, 2)
  receivedFrom  String?       @map("received_from") @db.VarChar(100)
  receivedDate  DateTime?     @map("received_date") @db.Date
  paymentMethod String?       @map("payment_method") @db.VarChar(50)
  remarks       String?       @db.VarChar(255)
  createdAt     DateTime?     @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt     DateTime?     @default(now()) @map("updated_at") @db.Timestamp(0)
  pgLocations   pg_locations? @relation(fields: [pgLocationId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "income_ibfk_1")

  @@index([pgLocationId], map: "pg_location_id")
}

model roles {
  id        Int           @id @default(autoincrement()) @map("s_no")
  roleName  String        @unique(map: "role_name") @map("role_name") @db.VarChar(50)
  status    roles_status? @default(ACTIVE)
  createdAt DateTime?     @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime?     @default(now()) @map("updated_at") @db.Timestamp(0)
  users     users[]
}

model rooms {
  id              Int                @id @default(autoincrement()) @map("s_no")
  roomId          String?            @unique(map: "room_id") @map("room_id") @db.VarChar(36)
  pgId            Int?               @map("pg_id")
  roomNo          String?            @map("room_no") @db.VarChar(20)
  bedCount        Int                @default(0) @map("bed_count")
  createdAt       DateTime?          @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt       DateTime?          @default(now()) @map("updated_at") @db.Timestamp(0)
  rentPrice       Decimal?           @default(0.00) @map("rent_price") @db.Decimal(10, 2)
  images          Json?
  isDeleted       Boolean?           @default(false) @map("is_deleted")
  advancePayments advance_payments[]
  beds            beds[]
  refundPayments  refund_payments[]
  pgLocations     pg_locations?      @relation(fields: [pgId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "rooms_ibfk_1")
  tenantPayments  tenant_payments[]
  tenants         tenants[]
  visitors        visitors[]

  @@unique([pgId, roomNo], map: "unique_pg_room")
}

model tenants {
  id              Int                @id @default(autoincrement()) @map("s_no")
  tenantId        String             @unique(map: "tenant_id") @map("tenant_id") @db.VarChar(50)
  name            String             @db.VarChar(100)
  phoneNo         String?            @map("phone_no") @db.VarChar(15)
  email           String?            @db.VarChar(100)
  pgId            Int?               @map("pg_id")
  roomId          Int?               @map("room_id")
  bedId           Int?               @map("bed_id")
  checkInDate     String             @map("check_in_date") @db.VarChar(10)
  checkOutDate    String?            @map("check_out_date") @db.VarChar(10)
  status          tenants_status?    @default(ACTIVE)
  createdAt       DateTime?          @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt       DateTime?          @default(now()) @map("updated_at") @db.Timestamp(0)
  images          Json?
  proofDocuments  Json?              @map("proof_documents")
  isDeleted       Boolean?           @default(false) @map("is_deleted")
  occupation      String?            @db.VarChar(100)
  tenantAddress   String?            @map("tenant_address") @db.VarChar(255)
  advancePayments advance_payments[]
  refundPayments  refund_payments[]
  tenantPayments  tenant_payments[]
  pgLocations     pg_locations?      @relation(fields: [pgId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "tenants_ibfk_1")
  rooms           rooms?             @relation(fields: [roomId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "tenants_ibfk_2")
  beds            beds?              @relation(fields: [bedId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "tenants_ibfk_3")

  @@index([bedId], map: "bed_id")
  @@index([pgId], map: "pg_location_id")
  @@index([roomId], map: "room_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model tenants_history {
  id             Int       @id @default(autoincrement()) @map("s_no")
  tenantId       String    @map("tenant_id") @db.VarChar(50)
  name           String    @db.VarChar(100)
  phoneNo        String?   @db.VarChar(15)
  email          String?   @db.VarChar(100)
  pgId           Int?      @map("pg_id")
  roomId         Int?      @map("room_id")
  bedId          Int?      @map("bed_id")
  checkInDate    String    @map("check_in_date") @db.VarChar(10)
  checkOutDate   String?   @map("check_out_date") @db.VarChar(10)
  createdAt      DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt      DateTime? @default(now()) @map("updated_at") @db.Timestamp(0)
  images         Json?
  proofDocuments Json?     @map("proof_documents")
  is_Deleted     Boolean?  @default(false)

  @@index([bedId], map: "bed_id")
  @@index([pgId], map: "pg_id")
  @@index([roomId], map: "room_id")
}

model visitors {
  id            Int           @id @default(autoincrement()) @map("s_no")
  pgId          Int?          @map("pg_id")
  visitorName   String?       @map("visitor_name") @db.VarChar(100)
  phoneNo       String?       @map("phone_no") @db.VarChar(20)
  purpose       String?       @db.VarChar(100)
  visitedDate   String?       @map("visited_date") @db.VarChar(50)
  checkInTime   String?       @map("check_in_time") @db.VarChar(20)
  checkOutTime  String?       @map("check_out_time") @db.VarChar(20)
  createdAt     DateTime?     @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt     DateTime?     @default(now()) @map("updated_at") @db.Timestamp(0)
  visitedRoomId Int?          @map("visited_room_id")
  visitedBedId  Int?          @map("visited_bed_id")
  isDeleted     Boolean?      @default(false) @map("is_deleted")
  beds          beds?         @relation(fields: [visitedBedId], references: [id], onUpdate: NoAction, map: "fk_visited_bed")
  rooms         rooms?        @relation(fields: [visitedRoomId], references: [id], onUpdate: NoAction, map: "fk_visited_room")
  pgLocations   pg_locations? @relation(fields: [pgId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "visitors_ibfk_1")

  @@index([pgId], map: "pg_location_id")
  @@index([visitedBedId], map: "fk_visited_bed")
  @@index([visitedRoomId], map: "fk_visited_room")
}

model city {
  id          Int            @id @default(autoincrement()) @map("s_no")
  name        String         @db.VarChar(255)
  countryCode String         @map("country_code") @db.VarChar(10)
  stateCode   String         @map("state_code") @db.VarChar(10)
  latitude    Decimal        @db.Decimal(10, 7)
  longitude   Decimal        @db.Decimal(10, 7)
  pgLocations pg_locations[]
}

model state {
  id          Int            @id @default(autoincrement()) @map("s_no")
  name        String         @db.VarChar(255)
  isoCode     String         @map("iso_code") @db.VarChar(10)
  countryCode String         @map("country_code") @db.VarChar(10)
  latitude    Decimal        @db.Decimal(10, 7)
  longitude   Decimal        @db.Decimal(10, 7)
  pgLocations pg_locations[]
  country     country        @relation(fields: [countryCode], references: [isoCode], onDelete: Cascade, map: "fk_state_country")

  @@index([countryCode], map: "fk_state_country")
}

model country {
  id        Int     @id @default(autoincrement()) @map("s_no")
  name      String  @db.VarChar(255)
  isoCode   String  @unique(map: "iso_code") @map("iso_code") @db.VarChar(10)
  flag      String? @db.VarChar(10)
  phoneCode String? @map("phone_code") @db.VarChar(20)
  currency  String? @db.VarChar(10)
  latitude  Decimal @db.Decimal(10, 7)
  longitude Decimal @db.Decimal(10, 7)
  state     state[]
}

model tenant_payments {
  id                   Int                            @id @default(autoincrement()) @map("s_no")
  tenantId             Int                            @map("tenant_id")
  pgId                 Int                            @map("pg_id")
  roomId               Int                            @map("room_id")
  bedId                Int                            @map("bed_id")
  amountPaid           Decimal                        @map("amount_paid") @db.Decimal(10, 2)
  paymentDate          DateTime?                      @map("payment_date") @db.Timestamp(0)
  paymentMethod        tenant_payments_payment_method @map("payment_method")
  status               tenant_payments_status
  remarks              String?                        @db.VarChar(255)
  createdAt            DateTime?                      @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt            DateTime?                      @default(now()) @map("updated_at") @db.Timestamp(0)
  startDate            DateTime                       @map("start_date") @db.Timestamp(0)
  endDate              DateTime                       @map("end_date") @db.Timestamp(0)
  isDeleted            Boolean?                       @default(false) @map("is_deleted")
  currentBill         Decimal?                       @default(0.00) @db.Decimal(10, 2) @map("current_bill")
  tenantPaymentHistory tenant_payment_history[]
  beds                 beds                           @relation(fields: [bedId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_tenant_payment_bed")
  pgLocations          pg_locations                   @relation(fields: [pgId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_tenant_payment_pg")
  rooms                rooms                          @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_tenant_payment_room")
  tenants              tenants                        @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_tenant_payment_tenant")

  @@unique([tenantId, pgId, roomId, paymentDate], map: "unique_payment")
  @@index([bedId], map: "fk_tenant_payment_bed")
  @@index([pgId], map: "fk_tenant_payment_pg")
  @@index([roomId], map: "fk_tenant_payment_room")
  @@index([tenantId], map: "fk_tenant_payment_tenant")
}

model advance_payments {
  id            Int                             @id @default(autoincrement()) @map("s_no")
  tenantId      Int                             @map("tenant_id")
  pgId          Int                             @map("pg_id")
  roomId        Int                             @map("room_id")
  bedId         Int                             @map("bed_id")
  amountPaid    Decimal                         @map("amount_paid") @db.Decimal(10, 2)
  paymentDate   DateTime?                       @default(now()) @map("payment_date") @db.DateTime(0)
  paymentMethod advance_payments_payment_method @map("payment_method")
  remarks       String?                         @db.VarChar(255)
  createdAt     DateTime?                       @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt     DateTime?                       @default(now()) @map("updated_at") @db.DateTime(0)
  status        advance_payments_status         @default(PENDING)
  isDeleted     Boolean?                        @default(false) @map("is_deleted")
  tenants       tenants                         @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "advance_payments_ibfk_1")
  pgLocations   pg_locations                    @relation(fields: [pgId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "advance_payments_ibfk_2")
  rooms         rooms                           @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "advance_payments_ibfk_3")
  beds          beds                            @relation(fields: [bedId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "advance_payments_ibfk_4")

  @@index([bedId], map: "bedId")
  @@index([pgId], map: "pgId")
  @@index([roomId], map: "roomId")
  @@index([tenantId], map: "tenantId")
}

model refund_payments {
  id            Int                            @id @default(autoincrement()) @map("s_no")
  tenantId      Int                            @map("tenant_id")
  pgId          Int                            @map("pg_id")
  roomId        Int                            @map("room_id")
  bedId         Int                            @map("bed_id")
  amountPaid    Decimal                        @map("amount_paid") @db.Decimal(10, 2)
  paymentDate   DateTime?                      @default(now()) @map("payment_date") @db.DateTime(0)
  paymentMethod refund_payments_payment_method @map("payment_method")
  remarks       String?                        @db.VarChar(255)
  createdAt     DateTime?                      @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt     DateTime?                      @default(now()) @map("updated_at") @db.DateTime(0)
  status        refund_payments_status         @default(PENDING)
  isDeleted     Boolean?                       @default(false) @map("is_deleted")
  tenants       tenants                        @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "refund_payments_ibfk_1")
  pgLocations   pg_locations                   @relation(fields: [pgId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "refund_payments_ibfk_2")
  rooms         rooms                          @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "refund_payments_ibfk_3")
  beds          beds                           @relation(fields: [bedId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "refund_payments_ibfk_4")

  @@index([bedId], map: "bedId")
  @@index([pgId], map: "pgId")
  @@index([roomId], map: "roomId")
  @@index([tenantId], map: "tenantId")
}

model tenant_payment_history {
  id              Int                                   @id @default(autoincrement()) @map("s_no")
  tenantPaymentId Int                                   @map("tenant_payment_id")
  bedId           Int                                   @map("bed_id")
  amountPaid      Decimal                               @map("amount_paid") @db.Decimal(10, 2)
  paymentDate     DateTime?                             @map("payment_date") @db.DateTime(0)
  paymentMethod   tenant_payment_history_payment_method @map("payment_method")
  status          tenant_payment_history_status?        @default(PAID)
  remarks         String?                               @db.VarChar(255)
  createdAt       DateTime?                             @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt       DateTime?                             @map("updated_at") @db.Timestamp(0)
  tenantPayments  tenant_payments                       @relation(fields: [tenantPaymentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_tenant_payment_history_payment")

  @@index([bedId], map: "fk_tenant_payment_history_bed")
  @@index([tenantPaymentId], map: "fk_tenant_payment_history_payment")
}

model OtherExpenses {
  id          Int          @id @default(autoincrement())
  pgId        Int          @map("pg_id")
  expenseName String       @map("expense_name") @db.VarChar(100)
  description String?      @db.Text
  amount      Float        @db.Float
  expenseDate DateTime     @map("expense_date") @db.Date
  createdAt   DateTime?    @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt   DateTime?    @default(now()) @map("updated_at") @db.Timestamp(0)
  isDeleted   Boolean?     @default(false) @map("is_deleted")
  pgLocations pg_locations @relation(fields: [pgId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "other_expenses_ibfk_1")

  @@index([pgId], map: "pg_id")
  @@map("other_expenses")
}

enum roles_status {
  ACTIVE
  INACTIVE
}

enum users_status {
  active
  inactive
}

enum EmployeeStatus {
  ACTIVE
  INACTIVE
}

enum pg_locations_status {
  ACTIVE
  INACTIVE
}

enum tenants_status {
  ACTIVE
  INACTIVE
}

enum tenant_payments_payment_method {
  GPAY
  PHONEPE
  CASH
  BANK_TRANSFER
}

enum tenant_payment_history_payment_method {
  GPAY
  PHONEPE
  CASH
  BANK_TRANSFER
}

enum tenant_payment_history_status {
  PAID
  PENDING
  FAILED
}

enum tenant_payments_status {
  PAID
  PENDING
  FAILED
  REFUNDED
}

enum advance_payments_payment_method {
  GPAY
  PHONEPE
  CASH
  BANK_TRANSFER
}

enum refund_payments_payment_method {
  GPAY
  PHONEPE
  CASH
  BANK_TRANSFER
}

enum advance_payments_status {
  PAID
  PENDING
  FAILED
}

enum refund_payments_status {
  PAID
  PENDING
  FAILED
}
