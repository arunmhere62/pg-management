generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model users {
  id              Int                 @id @default(autoincrement()) @map("s_no")
  name              String              @db.VarChar(100)
  email             String              @unique(map: "email") @db.VarChar(100)
  password          String              @db.VarChar(255)
  phone             String?             @db.VarChar(15)
  status            users_status?       @default(active)
  created_at        DateTime?           @default(now()) @db.Timestamp(0)
  updated_at        DateTime?           @default(now()) @db.Timestamp(0)
  role_id           Int?
  pg_location_id    Int
  pg_locations      pg_locations[]
  user_pg_locations user_pg_locations[]
  roles             roles?              @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users_role")

  @@index([role_id], map: "fk_users_role")
}

model beds {
  id       Int          @id @default(autoincrement()) @map("s_no")
  bed_id     String       @unique(map: "bed_id") @db.VarChar(50)
  room_id    Int?
  status     beds_status? @default(VACANT)
  created_at DateTime?    @default(now()) @db.Timestamp(0)
  updated_at DateTime?    @default(now()) @db.Timestamp(0)
  rooms      rooms?       @relation(fields: [room_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "beds_ibfk_1")
  tenants    tenants[]

  @@index([room_id], map: "room_id")
}

model employees {
  id           Int               @id @default(autoincrement()) @map("s_no")
  pg_location_id Int?
  name           String?           @db.VarChar(100)
  role           String?           @db.VarChar(50)
  phone          String?           @db.VarChar(15)
  email          String?           @unique(map: "email") @db.VarChar(100)
  salary         Decimal?          @db.Decimal(10, 2)
  join_date      DateTime?         @db.Date
  status         employees_status? @default(ACTIVE)
  created_at     DateTime?         @default(now()) @db.Timestamp(0)
  updated_at     DateTime?         @default(now()) @db.Timestamp(0)
  pg_locations   pg_locations?     @relation(fields: [pg_location_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "employees_ibfk_1")

  @@index([pg_location_id], map: "pg_location_id")
}

model expenses {
  id           Int           @id @default(autoincrement()) @map("s_no")
  pg_location_id Int?
  expense_type   String?       @db.VarChar(100)
  amount         Decimal?      @db.Decimal(10, 2)
  paid_to        String?       @db.VarChar(100)
  paid_date      DateTime?     @db.Date
  payment_method String?       @db.VarChar(50)
  remarks        String?       @db.VarChar(255)
  created_at     DateTime?     @default(now()) @db.Timestamp(0)
  updated_at     DateTime?     @default(now()) @db.Timestamp(0)
  pg_locations   pg_locations? @relation(fields: [pg_location_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "expenses_ibfk_1")

  @@index([pg_location_id], map: "pg_location_id")
}

model income {
  id           Int           @id @default(autoincrement()) @map("s_no")
  pg_location_id Int?
  income_type    String?       @db.VarChar(100)
  amount         Decimal?      @db.Decimal(10, 2)
  received_from  String?       @db.VarChar(100)
  received_date  DateTime?     @db.Date
  payment_method String?       @db.VarChar(50)
  remarks        String?       @db.VarChar(255)
  created_at     DateTime?     @default(now()) @db.Timestamp(0)
  updated_at     DateTime?     @default(now()) @db.Timestamp(0)
  pg_locations   pg_locations? @relation(fields: [pg_location_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "income_ibfk_1")

  @@index([pg_location_id], map: "pg_location_id")
}

model pg_locations {
  id              Int                  @id @unique(map: "s_no_2") @default(autoincrement()) @map("s_no")
  user_id           Int
  location_name     String               @db.VarChar(100)
  address           String               @db.VarChar(255)
  city              String               @db.VarChar(50)
  state             String               @db.VarChar(50)
  pincode           String?              @db.VarChar(10)
  created_at        DateTime?            @default(now()) @db.Timestamp(0)
  updated_at        DateTime?            @default(now()) @db.Timestamp(0)
  status            pg_locations_status? @default(ACTIVE)
  employees         employees[]
  expenses          expenses[]
  income            income[]
  users             users                @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "pg_locations_ibfk_1")
  rooms             rooms[]
  tenants           tenants[]
  user_pg_locations user_pg_locations[]
  visitors          visitors[]

  @@index([user_id], map: "owner_id")
}

model roles {
  id       Int           @id @default(autoincrement()) @map("s_no")
  role_name  String        @unique(map: "role_name") @db.VarChar(50)
  status     roles_status? @default(ACTIVE)
  created_at DateTime?     @default(now()) @db.Timestamp(0)
  updated_at DateTime?     @default(now()) @db.Timestamp(0)
  users      users[]
}

model rooms {
  id         Int          @id @default(autoincrement()) @map("s_no")
  room_id      String       @unique(map: "room_id") @db.VarChar(50)
  pg_id        Int
  room_number  String       @db.VarChar(20)
  bed_count    Int
  status       String?      @default("Available") @db.VarChar(20)
  created_at   DateTime?    @default(now()) @db.Timestamp(0)
  updated_at   DateTime?    @default(now()) @db.Timestamp(0)
  rent_price   Decimal      @default(0.00) @db.Decimal(10, 2)
  images       Json?
  beds         beds[]
  pg_locations pg_locations @relation(fields: [pg_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "rooms_ibfk_1")
  tenants      tenants[]

  @@index([pg_id], map: "pg_id")
}

model tenants {
  id           Int             @id @default(autoincrement()) @map("s_no")
  tenant_id      String          @unique(map: "tenant_id") @db.VarChar(50)
  name           String          @db.VarChar(100)
  phone_number   String          @db.VarChar(15)
  email          String?         @db.VarChar(100)
  pg_location_id Int?
  room_id        Int?
  bed_id         Int?
  check_in_date  DateTime        @db.Date
  check_out_date DateTime?       @db.Date
  status         tenants_status? @default(ACTIVE)
  created_at     DateTime?       @default(now()) @db.Timestamp(0)
  updated_at     DateTime?       @default(now()) @db.Timestamp(0)
  image          Bytes?          @db.Blob
  proof_document Bytes?          @db.Blob
  pg_locations   pg_locations?   @relation(fields: [pg_location_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "tenants_ibfk_1")
  rooms          rooms?          @relation(fields: [room_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "tenants_ibfk_2")
  beds           beds?           @relation(fields: [bed_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "tenants_ibfk_3")

  @@index([bed_id], map: "bed_id")
  @@index([pg_location_id], map: "pg_location_id")
  @@index([room_id], map: "room_id")
}

model user_pg_locations {
  user_id        Int
  pg_location_id Int
  users          users        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_pg_locations_ibfk_1")
  pg_locations   pg_locations @relation(fields: [pg_location_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_pg_locations_ibfk_2")

  @@id([user_id, pg_location_id])
  @@index([pg_location_id], map: "pg_location_id")
}


model visitors {
  id           Int           @id @default(autoincrement()) @map("s_no")
  pg_location_id Int?
  visitor_name   String?       @db.VarChar(100)
  contact_number String?       @db.VarChar(15)
  purpose        String?       @db.VarChar(100)
  visit_date     DateTime?     @db.Date
  check_in_time  DateTime?     @db.Time(0)
  check_out_time DateTime?     @db.Time(0)
  created_at     DateTime?     @default(now()) @db.Timestamp(0)
  updated_at     DateTime?     @default(now()) @db.Timestamp(0)
  pg_locations   pg_locations? @relation(fields: [pg_location_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "visitors_ibfk_1")

  @@index([pg_location_id], map: "pg_location_id")
}

enum roles_status {
  ACTIVE
  INACTIVE
}

enum beds_status {
  OCCUPIED
  VACANT
}

enum users_status {
  active
  inactive
}

enum employees_status {
  ACTIVE
  INACTIVE
}

enum pg_locations_status {
  ACTIVE
  INACTIVE
}

enum tenants_status {
  ACTIVE
  INACTIVE
}
